{{ 'option_selection.js' | shopify_asset_url | script_tag }}

<script defer>
  function updateRecentlyViewedProductsCookie() {
      let recentlyViewedProducts = [];

      let recentlyViewedProductsCookie = document.cookie.indexOf('recentlyViewedProducts=') !== -1  ? JSON.parse(document.cookie.split("; ").find((row) => row.startsWith("recentlyViewedProducts")).split('=').slice(1).join('=')) : [];
       let expiry = new Date(400 * 24 * 60 * 60 * 1000 + Date.parse(new Date()));

      let productData = {
          id: "{{ product.id }}",
          title: "{{ product.title }}",
          url: "{{ product.url }}",
          image: "{{ product.featured_image | image_url }}",
          image_alt: "{{ product.featured_image.alt }}",
          image_width: "{{ product.featured_image.width }}",
          image_height: "{{ product.featured_image.height }}",
          price: "{{ product.price | money }}",
          compare_at_price: "{{ product.compare_at_price | money }}",
          price_difference: "{{ product.compare_at_price | minus: product.price }}",
          price_difference_with_currency: "{{ product.compare_at_price | minus: product.price | money }}",
          date_difference: "{{ 'now' | date: "%d" | minus: product.published_at | date: "%d" }}"
      };

      for (product = 0; product < recentlyViewedProductsCookie.length; product++) {
          if (recentlyViewedProductsCookie[product].id === productData.id) {
              recentlyViewedProductsCookie.splice(product, 1);
          }
      }

      recentlyViewedProductsCookie.push(productData);
      let newList = JSON.stringify(recentlyViewedProductsCookie);

      document.cookie = "recentlyViewedProducts" + "=" + newList + "; expires=" + expiry + "; path=/; domain=." + window.location.hostname;
  }
  updateRecentlyViewedProductsCookie();
</script>

{% liquid
  assign mobile_items = 1
  assign tablet_items = 1
  assign desktop_items = 1
  assign desktop_section_width = 100
%}

{% style %}
   .product-page-slider__slides-container {
    --mobile-items: {{ mobile_items }};
    --tablet-items: {{ tablet_items }};
    --desktop-items: {{ desktop_items }};
  }

  @media screen and (min-width: 1025px) {
     .product-page-slider__slides-container {
      --container-width: calc(var(--section-width) * {{ desktop_section_width | divided_by: 100.00 }} );
    }
     .prev,
     .next {
      width: {{ 100 | minus: desktop_section_width | divided_by: 2 }}%;
    }
  }

  .item {
  aspect-ratio: 1;
  }
{% endstyle %}

<div class="product-hidden-images" style="display: none;">
  {% if product.images.size > 0 %}
    {% for image in product.images %}
      <div
        class="item"
        {% if image.alt contains '#color:' %}
          {% assign image_alt = image.alt | split: '#color:' %}
          data-variant-color="{{ image_alt }}"
        {% elsif image.attached_to_variant? %}
          data-attached-to-variant="{{ image.variants[0].title }}"
        {% endif %}
      >
        <div class="item-picture">
          <img
            srcset="{{ image | image_url }}"
            alt="{{ image.alt | escape }}"
            width="{{ image.width }}"
            height="{{ image.height }}"
            class="fit"
          >
        </div>
      </div>
    {% endfor %}
  {% else %}
    <div class="item">
      <div class="item-picture">{{ 'product-1' | placeholder_svg_tag: 'placeholder' }}</div>
    </div>
  {% endif %}
</div>

<div class="product-hidden-thumbnails" style="display: none;">
  {% if product.images.size > 0 %}
    {% for thumbnail in product.images %}
      <div
        class="thumbnail"
        {% if thumbnail.alt contains '#color:' %}
          {% assign thumbnail_alt = thumbnail.alt | split: '#color:' %}
          data-variant-color="{{ thumbnail_alt }}"
        {% elsif thumbnail.attached_to_variant? %}
          data-attached-to-variant="{{ thumbnail.variants[0].title }}"
        {% endif %}
      >
        <div class="thumbnail-picture media">
          <img
            srcset="{{ thumbnail | image_url }}"
            loading="lazy"
            alt="{{ thumbnail.alt | escape }}"
            width="{{ thumbnail.width }}"
            height="{{ thumbnail.height }}"
            class="fit"
          >
        </div>
      </div>
    {% endfor %}
  {% else %}
    <div class="thumbnail">
      <div class="thumbnail-picture">
        {{ 'product-1' | placeholder_svg_tag: 'placeholder' }}
      </div>
    </div>
  {% endif %}
</div>

<div class="product-hidden-payment-methods" style="display: none;">
  <div class="product-page__payment-methods"></div>
</div>

{% assign current_variant = product.selected_or_first_available_variant %}

<section class="product-page" data-product="{{ product.id }}">
  <div class="product-page__container">
    <div class="product-page__content">
      <div class="product-page__pictures">
        <product-page-slider
          data-mobile-items="{{ mobile_items }}"
          data-tablet-items="{{ tablet_items }}"
          data-desktop-items="{{ desktop_items }}"
          class="{{ section.id }}"
        >
          <div class="product-page-slider">
            <div class="prev">
              {% render 'icons', icon: 'chevron-prev' %}
            </div>
            <div class="product-page-slider__slides-container">
              <div class="zoom-icon"></div>
              <div class="slide"></div>
            </div>
            <div class="next">
              {% render 'icons', icon: 'chevron-next' %}
            </div>
          </div>
          <div class="product-page-slider__indicators"></div>
          <div class="product-page-slider__thumbnails-container ">
            <div class="product-page-slider__thumbnails"></div>
          </div>
        </product-page-slider>
      </div>
      <div class="product-page__info">
        {% form 'product', product, class: 'product-page__form' %}
          {% for block in section.blocks %}
            {% case block.type %}
              {% when 'vendor' %}
                <div class="product-page__vendor">
                  <p>{{ product.vendor }}</p>
                </div>
              {% when 'name' %}
                <div class="product-page__name">
                  <h3>{{ product.title }}</h3>
                </div>
              {% when 'reviews' %}
                <div class="product-page__reviews-stars"><p>******** stars</p></div>
              {% when 'sale_tag' %}
                <div class="product-page__prices">
                  {% assign price_difference_text = block.settings.price_difference_text %}
                  <div class="product-page__tag"></div>
                </div>
              {% when 'price' %}
                <div class="product-page__prices">
                  <div class="product-page__price">
                    <p class="product-page__price--actual price--actual">
                      {{ current_variant.price | money }}
                    </p>
                    <p class="product-page__price--compare-at price--compare-at">
                      {{ current_variant.compare_at_price | money }}
                    </p>
                  </div>
                </div>
              {% when 'variants_selector' %}
                {% if product.has_only_default_variant %}
                {% else %}
                  <div class="product-page__variants">
                    <select id="product-select" name="id">
                      {% for variant in product.variants %}
                        <option
                          value="{{ variant.id }}"
                          {% if variant == product.selected_or_first_available_variant %}
                            selected="selected"
                          {% endif %}
                        >
                          {{ variant.title }} - {{ variant.price | money }}
                        </option>
                      {% endfor %}
                    </select>
                  </div>
                {% endif %}
              {% when 'quantity' %}
                <quantity-field class="quantity">
                  <label for="quantity-text"><p>Quantity</p></label>
                  <div class="quantity-field" id="quantity-field">
                    <button type="button" class="quantity-field__minus" id="quantity-field__minus">-</button>
                    <input
                      type="quantity"
                      class="quantity-field__input"
                      id="quantity-field__input"
                      name="quantity"
                      min="1"
                      value="1"
                    >
                    <button type="button" class="quantity-field__plus" id="quantity-field__plus">+</button>
                  </div>
                </quantity-field>
              {% when 'stock_alert' %}
                {% assign stock_alert_threshold = block.settings.stock_alert_threshold %}
                <div class="product-page__stock-disclaimer">
                  <svg
                    class="product-page__stock-disclaimer__svg"
                    width="25"
                    height="24"
                    viewBox="0 0 25 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path d="M19.6384 17.5H5.36159L12.5 5.00778L19.6384 17.5Z" stroke="#FB4343"/>
                    <path d="M12.1297 13.6845L11.9497 8.89453H13.0797L12.8897 13.6845H12.1297ZM12.5197 15.9545C12.333 15.9545 12.1763 15.8912 12.0497 15.7645C11.923 15.6379 11.8597 15.4879 11.8597 15.3145C11.8597 15.1279 11.923 14.9745 12.0497 14.8545C12.1763 14.7345 12.333 14.6745 12.5197 14.6745C12.7063 14.6745 12.8597 14.7345 12.9797 14.8545C13.0997 14.9745 13.1597 15.1279 13.1597 15.3145C13.1597 15.4879 13.0997 15.6379 12.9797 15.7645C12.8597 15.8912 12.7063 15.9545 12.5197 15.9545Z" fill="#FB4343"/>
                  </svg>
                  <p class="product-page__stock-disclaimer__text"></p>
                </div>
              {% when 'countdown_timer' %}
                <div class="product-page__countdown-timer">
                  <p>Countdown timer</p>
                </div>
              {% when 'buttons' %}
                <div class="product-page__buttons buttons buttons--center">
                  <button
                    type="submit"
                    class="button button--primary border add-to-cart-button"
                    id="add-to-cart-button"
                  >
                    ADD TO CART
                  </button>

                  <div class="dynamic-buy-button" id="dynamic-buy-button">
                    {{ form | payment_button }}
                  </div>
                </div>
              {% when 'trust_bar' %}
                <div class="product-page__trust-bar">
                  <a
                    {% if trust_icon_1_link != blank %}
                      href="{{ trust_icon_1_link }}"
                    {% endif %}
                    class="product-page__trust-badge"
                  >
                    <div class="product-page__trust-icon">
                      {{ block.settings.trust_icon_1_svg }}
                    </div>
                    <p class="product-page__trust-text {% if block.settings.trust_icon_1_link != blank %}underline{% endif %}">
                      {{ block.settings.trust_icon_1_text }}
                    </p>
                  </a>
                  <a
                    {% if trust_icon_2_link != blank %}
                      href="{{ trust_icon_2_link }}"
                    {% endif %}
                    class="product-page__trust-badge"
                  >
                    <div class="product-page__trust-icon">
                      {{ block.settings.trust_icon_2_svg }}
                    </div>
                    <p class="product-page__trust-text {% if block.settings.trust_icon_2_link != blank %}underline{% endif %}">
                      {{ block.settings.trust_icon_2_text }}
                    </p>
                  </a>
                  <a
                    {% if trust_icon_2_link != blank %}
                      href="{{ trust_icon_2_link }}"
                    {% endif %}
                    class="product-page__trust-badge"
                  >
                    <div class="product-page__trust-icon">
                      {{ block.settings.trust_icon_3_svg }}
                    </div>
                    <p class="product-page__trust-text {% if block.settings.trust_icon_3_link != blank %}underline{% endif %}">
                      {{ block.settings.trust_icon_3_text }}
                    </p>
                  </a>
                </div>
              {% when 'recommended_products' %}
                {% if product.metafields.custom.recommended_products %}
                  <div class="product-page__recommended-products-section">
                    <h6 class="product-page__recommended-products-section-title">Buy it with</h6>
                    <div class="product-page__recommended-product-list">
                      {% for bundled_product in product.metafields.custom.recommended_products.value limit: 3 %}
                        <div class="product-page__recommended-product-container">
                          <a href="{{ bundled_product.url }}" class="product-page__recommended-product media">
                            <img
                              srcset="{{ bundled_product.featured_image | image_url }}"
                              loading="lazy"
                              alt="{{ bundled_product.featured_image | escape }}"
                              width="{{ bundled_product.featured_image.width }}"
                              height="{{ bundled_product.featured_image.height }}"
                              class="full"
                            >
                            <div class="quick-add-icon">
                              {% render 'icons', icon: 'quick-add' %}
                            </div>
                          </a>
                          <a href="{{ bundled_product.url }}" class="product-page__recommended-product-title">
                            {{ bundled_product.title }}
                          </a>
                        </div>
                      {% endfor %}
                    </div>
                  </div>
                {% endif %}
            {% endcase %}
          {% endfor %}
        {% endform %}
      </div>
    </div>
  </div>
</section>

<script>
    function formatMoney(cents, format) {
      if (typeof cents == "string") {
        cents = cents.replace(".", "");
      }
      var value = "";
      var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
      var formatString = format || this.money_format;

      function defaultOption(opt, def) {
        return typeof opt == "undefined" ? def : opt;
      }

      function formatWithDelimiters(number, precision, thousands, decimal) {
        precision = defaultOption(precision, 2);
        thousands = defaultOption(thousands, ",");
        decimal = defaultOption(decimal, ".");

        if (isNaN(number) || number == null) {
          return 0;
        }

        number = (number / 100.0).toFixed(precision);

        var parts = number.split("."),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + thousands),
          cents = parts[1] ? decimal + parts[1] : "";

        return dollars + cents;
      }

      switch (formatString.match(placeholderRegex)[1]) {
        case "amount":
          value = formatWithDelimiters(cents, 2);
          break;
        case "amount_no_decimals":
          value = formatWithDelimiters(cents, 0);
          break;
        case "amount_with_comma_separator":
          value = formatWithDelimiters(cents, 2, ".", ",");
          break;
        case "amount_no_decimals_with_comma_separator":
          value = formatWithDelimiters(cents, 0, ".", ",");
          break;
      }

      return formatString.replace(placeholderRegex, value);
    }

    let variantsInventory = {};
    {% for variant in product.variants %}
      variantsInventory["{{ variant.title }}"] = {{ variant.inventory_quantity }};
    {% endfor %}


    let paymentMethods = `
    <div class="product-page__payment-methods">
        {% for block in section.blocks %}
          {% case block.type %}
            {% when "buttons" %}
              {% if block.settings.show_payment_methods == true %}
                  {% assign enabled_payment_types = block.settings.chosen_payment_methods | remove: ' ' | split: ',' %}
                  {% for type in enabled_payment_types %}
                    {{ type | payment_type_svg_tag: class: 'icon' }}
                  {% endfor %}
              {% endif %}
          {% endcase %}
        {% endfor %}
    </div>
    `;

    if (document.querySelector(".product-page__buttons")) {
      const targetNode = document.querySelector(".product-page__buttons");
      const config = { childList: true, subtree: true };

      function callback(mutationList, observer) {
        for (const mutation of mutationList) {
          if (mutation.type === "childList" && mutation.target.className === "shopify-payment-button" && mutation.addedNodes.length > 0) {
              setTimeout(() => {
                document.querySelector(".shopify-payment-button__more-options").innerHTML = `${document.querySelector(".shopify-payment-button__more-options").innerHTML} ${paymentMethods}`;
                document.querySelector(".dynamic-buy-button").style.height = `${document.querySelector(".dynamic-buy-button").scrollHeight}px`;
                document.querySelector(".dynamic-buy-button").classList.add("loaded");
                observer.disconnect();
              }, 500);
          }
        }
      }
      const observer = new MutationObserver(callback);
      observer.observe(targetNode, config);
    }



    {% comment %} {% if product.images.size > 0 %}
      let productWithNoVariants = [];
      let productWithNoFeaturedImage = [];
      let productWithNoAlts = [];
      let storedProductImages = [];
      let variantName;
      let tempoArray;
      let variantPictures = [];
        {% for image in product.images %}
          {% if image.alt contains '#color:' %}
              {% assign real_image_alt = image.alt | split: '#color:' %}
              variantName = "{{ real_image_alt.last }}~from alt";
          {% elsif image.attached_to_variant? %}
              {% assign image_variant_title = image.variants[0].title %}
              variantName = "{{ image_variant_title }}~from featured image";
          {% else %}
              variantName = "no variant";
          {% endif %}

          tempoArray = {
            "variant": variantName,
            "picture":  `
            <div
              class="item"
            >
              <div class="item-picture">
                <img
                  srcset="{{ image | image_url }}"
                  alt="{{ image.alt | escape }}"
                  width="{{ image.width }}"
                  height="{{ image.height }}"
                  class="fit"
                >
              </div>
            </div>
            `
          };

          storedProductImages.push(tempoArray);

        {% endfor %}
    {% endif %} {% endcomment %}

    let productJson = {{ product | json }};

    if (document.querySelector(".product-page__variants") && productJson.variants.length > 1) {
          function selectCallback(variant, selector) {
            document.querySelector(".product-page__price--compare-at").innerHTML = "";

            let priceDifference = variant.compare_at_price - variant.price;

            if (priceDifference > 0) {
                if (document.querySelector(".product-page__tag")) {
                  document.querySelector(".product-page__tag").classList.remove("hidden");
                  document.querySelector(".product-page__tag").innerHTML = "<p class='tag--animated tag-text'> {{ price_difference_text }} " + formatMoney(priceDifference, "{{ shop.money_format }}</p>");
                }
            } else {
                if (document.querySelector(".product-page__tag")) {
                  document.querySelector(".product-page__tag").classList.add("hidden");
                }
            }
            if (variant.compare_at_price > 0) {
              document.querySelector(".product-page__price--compare-at").innerHTML = formatMoney(variant.compare_at_price,"{{ shop.money_format }}")
            }
            document.querySelector(".product-page__price--actual").innerHTML = formatMoney(variant.price,"{{ shop.money_format }}");
            for (var key in variantsInventory) {
              if (key == variant.title) {
                if (variantsInventory[key] > 0 && variantsInventory[key] < {{ stock_alert_threshold }} ) {
                  if (document.querySelector(".product-page__stock-disclaimer__text")) {
                    document.querySelector(".product-page__stock-disclaimer__text").innerHTML =  `Only ${variantsInventory[key]} left in stock`;
                  }
                }
                if (variantsInventory[key] > 0) {
                  if (document.getElementById("dynamic-buy-button").classList.contains("sold-out")) {
                    document.getElementById("add-to-cart-button").classList.remove("sold-out");
                    document.getElementById("add-to-cart-button").innerHTML = "ADD TO CART";

                    document.getElementById("dynamic-buy-button").classList.remove("sold-out");
                  }
                } else if (variantsInventory[key] === 0) {
                  if (document.querySelector(".product-page__stock-disclaimer__text")) {
                    document.querySelector(".product-page__stock-disclaimer__text").innerHTML =  `Out of stock`;
                  }
                  document.getElementById("add-to-cart-button").classList.add("sold-out");
                  document.getElementById("add-to-cart-button").innerHTML = "SOLD OUT";

                  document.getElementById("dynamic-buy-button").classList.add("sold-out");
                }
              }
            }

            {% comment %} storedProductImages.forEach((array) => {
                if (variant.title.includes("no variant") ) {
                  document.querySelector(".product-page-slider__slides-container .slide").innerHTML += array.picture;
                }
              }
            ); {% endcomment %}

            document.querySelector(".product-page-slider__slides-container .slide").innerHTML = "";
            document.querySelector(".product-page-slider__thumbnails").innerHTML = "";
            document.querySelector(".product-page-slider__indicators").innerHTML = "";

            document.querySelectorAll(".product-hidden-images .item").forEach((item)=>{
              if (item.getAttribute("data-attached-to-variant")) {
                if (item.getAttribute("data-attached-to-variant") === variant.title) {
                  let itemClone = item.cloneNode(true);
                  document.querySelector(".product-page-slider__slides-container .slide").prepend(itemClone);}
              } else if (item.getAttribute("data-variant-color") && variant.featured_media) {
                if (item.getAttribute("data-variant-color") === variant.featured_media.alt.split("#color:")[1] ) {
                  let itemClone = item.cloneNode(true);
                  document.querySelector(".product-page-slider__slides-container .slide").appendChild(itemClone);
                }
              } else {
                  let itemClone = item.cloneNode(true);
                  document.querySelector(".product-page-slider__slides-container .slide").appendChild(itemClone);}
            })

            document.querySelectorAll(".product-hidden-thumbnails .thumbnail").forEach((thumbnail)=>{
              if (thumbnail.getAttribute("data-attached-to-variant")) {
                if (thumbnail.getAttribute("data-attached-to-variant") === variant.title) {
                  let thumbnailClone = thumbnail.cloneNode(true);
                  document.querySelector(".product-page-slider__thumbnails").prepend(thumbnailClone);}
              } else if (thumbnail.getAttribute("data-variant-color") && variant.featured_media) {
                if (thumbnail.querySelector(".thumbnail-picture img").alt === variant.featured_media.alt ) {
                  let thumbnailClone = thumbnail.cloneNode(true);
                  document.querySelector(".product-page-slider__thumbnails").appendChild(thumbnailClone);
                }
              } else {
                  let itemClone = thumbnail.cloneNode(true);
                  document.querySelector(".product-page-slider__thumbnails").appendChild(itemClone);
            }
            })
        }

        if (document.querySelector(".product-page__variants")) {
            new Shopify.OptionSelectors('product-select', {
            product: {{ product | json }},
            onVariantSelected: selectCallback,
            enableHistoryState: true
          });}
  } else {
          document.querySelectorAll(".product-hidden-images .item").forEach((item)=>{
              let itemClone = item.cloneNode(true);
              document.querySelector(".product-page-slider__slides-container .slide").appendChild(itemClone);
          })

          document.querySelectorAll(".product-hidden-thumbnails .thumbnail").forEach((thumbnail)=>{
              let thumbnailClone = thumbnail.cloneNode(true);
              document.querySelector(".product-page-slider__thumbnails").appendChild(thumbnailClone);
          })
  }
</script>

{% schema %}
{
  "name": "Product page",
  "class": "page-product",
  "settings": [],
  "blocks": [
    { "type": "vendor", "name": "Vendor", "limit": 1, "settings": [] },
    { "type": "name", "name": "Product name", "limit": 1, "settings": [] },
    { "type": "reviews", "name": "Reviews", "limit": 1, "settings": [] },
    {
      "type": "sale_tag",
      "name": "Sale tag",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "price_difference_text",
          "label": "Price difference disclaimer text",
          "default": "SAVE",
          "info": "Make sure the product compare at price is filled in and is greater than the price. Otherwise the sale tag will not show or will not work properly."
        }
      ]
    },
    { "type": "price", "name": "Price", "limit": 1, "settings": [] },
    { "type": "variants_selector", "name": "Variants selector", "limit": 1, "settings": [] },
    { "type": "quantity", "name": "Quantity", "limit": 1, "settings": [] },
    {
      "type": "stock_alert",
      "name": "Stock alert",
      "limit": 1,
      "settings": [
        {
          "type": "range",
          "id": "stock_alert_threshold",
          "min": 1,
          "max": 100,
          "step": 1,
          "unit": "pcs",
          "label": "Stock alert threshold",
          "default": 15
        }
      ]
    },
    { "type": "countdown_timer", "name": "Countdown timer", "limit": 1, "settings": [] },
    {
      "type": "buttons",
      "name": "Buttons",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_add_to_cart",
          "label": "Show add to cart button",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_buy_now",
          "label": "Show buy now button",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_payment_methods",
          "label": "Show payment methods icons",
          "default": true
        },
        {
          "type": "text",
          "id": "chosen_payment_methods",
          "label": "Pick which payment methods to show",
          "default": "paypal,visa,master,american_express,discover,shopify_pay",
          "info": "All available payment methods: afterpay,american_express,apple_pay,bitcoin,dankort,diners_club,discover,dogecoin,dwolla,facebook_pay,forbrugsforeningen,google_pay,ideal,jcb,klarna,klarna-pay-later,litecoin,maestro,master,paypal,shopify_pay,sofort,visa"
        }
      ]
    },
    {
      "type": "trust_bar",
      "name": "Trust bar",
      "limit": 1,
      "settings": [
        {
          "type": "liquid",
          "id": "trust_icon_1_svg",
          "label": "First trust icon SVG"
        },
        {
          "type": "text",
          "id": "trust_icon_1_text",
          "label": "First trust icon text",
          "default": "Free shipping"
        },
        {
          "type": "url",
          "id": "trust_icon_1_link",
          "label": "First trust icon link"
        },
        {
          "type": "liquid",
          "id": "trust_icon_2_svg",
          "label": "Second trust icon SVG"
        },
        {
          "type": "text",
          "id": "trust_icon_2_text",
          "label": "Second trust icon text",
          "default": "30-day money back guarantee"
        },
        {
          "type": "url",
          "id": "trust_icon_2_link",
          "label": "Second trust icon link"
        },
        {
          "type": "liquid",
          "id": "trust_icon_3_svg",
          "label": "Third trust icon SVG"
        },
        {
          "type": "text",
          "id": "trust_icon_3_text",
          "label": "Third trust icon text",
          "default": "24/7 customer support"
        },
        {
          "type": "url",
          "id": "trust_icon_3_link",
          "label": "Third trust icon link"
        }
      ]
    },
    {
      "type": "recommended_products",
      "name": "Recommended products",
      "limit": 1,
      "settings": [
        {
          "type": "header",
          "content": "Recommended products requirement",
          "info": "Make sure you have created a custom [metafield](https://help.shopify.com/en/manual/metafields) in [admin settings](/admin/metafields) named \"custom.recommended_products\" and went to the product page and selected the products you want to recommend in the metafields section. Otherwise the recommended products section will not show."
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product page"
    }
  ]
}
{% endschema %}

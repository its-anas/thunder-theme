{% liquid
  assign mobile_items = section.settings.mobile_items
  assign tablet_items = section.settings.tablet_items
  assign desktop_items = section.settings.desktop_items
  assign desktop_section_width = section.settings.row_width
  assign items_limit = section.settings.items_limit
%}

{%- style -%}
  .{{ section.id }}.recently-viewed-products > .slider-component > .slides-container {
    --mobile-items: {{ mobile_items }};
    --tablet-items: {{ tablet_items }};
    --desktop-items: {{ desktop_items }};
  }
  @media screen and (min-width: 1025px) {
    .{{ section.id }}.recently-viewed-products > .slider-component > .slides-container {
      --container-width: calc(var(--section-width) * {{ desktop_section_width | divided_by: 100.00 }} );
    }
    .{{ section.id }}.recently-viewed-products > .slider-component > .prev,
    .{{ section.id }}.recently-viewed-products > .slider-component > .next {
      width: {{ 100 | minus: desktop_section_width | divided_by: 2 }}%;
    }
  }

  .{{ section.id }}.recently-viewed-products > .slider-component > .slides-container > .slide > .item > .recently-viewed-products__image {
    aspect-ratio: {{ section.settings.aspect_ratio }};
  }

  .{{ section.id }}.recently-viewed-products {
    gap: {{ section.settings.space_between_elements }}rem;
    padding: {{ section.settings.space_outside_elements | divided_by: 2 }}px 0;
  }

  .{{ section.id }}.just-color {
    background-color: {{ section.settings.background_color }};
   }

  .{{ section.id }}.image {
    background-image: url({{ section.settings.background_image | image_url: width: settings.wrapped_content_width }});
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
   }

   #selectit {
    width: 100%;
    height: 100%;
   }
{%- endstyle -%}
<div id="selectit"></div>

<slider-section
  data-mobile-items="{{ mobile_items }}"
  data-tablet-items="{{ tablet_items }}"
  data-desktop-items="{{ desktop_items }}"
  class="{{ section.id }} recently-viewed-products just-color {% if section.settings.background_image == blank %}just-color{% else %}{{ section.settings.background_type }}{% endif %} {{ section.settings.section_width }}"
>
  <div class="recently-viewed-products__heading">
    <h6>{{ section.settings.heading }}</h6>
  </div>
  <div class="slider-component">
    <div class="prev">
      {% render 'icons', icon: 'chevron-prev' -%}
    </div>

    <div class="slides-container">
      <recently-viewed-products class="slide"></recently-viewed-products>
    </div>
    <div class="next">
      {% render 'icons', icon: 'chevron-next' -%}
    </div>
  </div>
  </div>
</slider-section>

<script defer>
  {% comment %} 
  /**============================================
 *               * ANCHOR: Recently viewed products section
 *=============================================**/
  1. We get the cookie from the browser and parse it to an array using the JSON.parse() method
  2. We check if the cookie is not empty and if it is, we hide the slider-section
  3. We loop through the array and get the product information
  4. We create a div element with the class name “item”
  5. We set the innerHTML of the div element to the product information we got from the array
  6. We append the div element to the slider-element 
{% endcomment %}
  class recentlyViewedProducts extends HTMLElement {
          constructor() {
                  super();
          }
          connectedCallback() {
                  this.attachShadow({ mode: "open" });
                  this.shadowRoot.innerHTML = "<slot></slot>";
                  this.addProducts();
          }

          addProducts() {
                  let products =
                          document.cookie.indexOf("recentlyViewedProducts=") !== -1
                                  ? JSON.parse(
                                            document.cookie
                                                    .split("; ")
                                                    .find((row) => row.startsWith("recentlyViewedProducts"))
                                                    .split("=")
                                                    .slice(1)
                                                    .join("=")
                                    )
                                  : [];

                  if (products.length > 0) {
                          let maxItems = products.length > {{ items_limit }} ? {{ items_limit }} : products.length;
                          for (let product = maxItems - 1; product >= 0; product--) {
                                  let productId = products[product].id;
                                  let productTitle = products[product].title;
                                  let productUrl = products[product].url;
                                  let productImage = products[product].image;
                                  let productImageAlt = products[product].image_alt;
                                  let productImageWidth = products[product].image_width;
                                  let productImageHeight = products[product].image_height;
                                  let productPrice = products[product].price;
                                  let productCompareAtPrice = products[product].compare_at_price;
                                  let productPriceDifference = products[product].price_difference;
                                  let productPublishedAt = products[product].published_at;
                                  let currentDate = products[product].current_date;
                                  let date_difference = products[product].date_difference;
                                  // create a document 'div' element called itemElement with the class name 'item'
                                  let itemElement = document.createElement("div");
                                  itemElement.classList.add("item");

                                  itemElement.innerHTML = `
                                      <div class="recently-viewed-products__image">
                                      <a class="quick-add-icon">
                                          {% render 'icons', icon: 'quick-add' -%}
                                      </a>
                                          <a href="${productUrl}" class="media">
                                          <img srcset="${productImage}" loading="lazy" alt="${productImageAlt}" width="${productImageWidth}" height="${productImageHeight}" class="fit" >
                                          </a>
                                      </div>
                                      <div class="recently-viewed-products__container">
                                          <p class="text">
                                          ${productTitle}
                                          </p>
                                      <div class="recently-viewed-products__price">
                                          <p class="text price--normal">${productPrice}</p>
                                          <p class="text price--sale">${productCompareAtPrice}</p>
                                      </div>
                                      </div>
                                  `;

                                  this.appendChild(itemElement);
                          }
                  } else {
                    let recentlyViewedProductsSections = document.querySelectorAll('recently-viewed-products');
                    recentlyViewedProductsSections.forEach(section => {
                      section.closest('slider-section').style.display = 'none';
                    });
                  }
          }
  }
  customElements.define("recently-viewed-products", recentlyViewedProducts);
</script>

{% schema %}
{
  "name": "Recently viewed products",
  "settings": [
    {
      "type": "header",
      "content": "Product settings",
      "info": "⚠️ Section is displayed in the store only if the customer (or you) has viewed at least one product."
    },
    {
      "type": "range",
      "id": "aspect_ratio",
      "min": 0.5,
      "max": 2,
      "step": 0.1,
      "unit": "a/r",
      "label": "Aspect ratio",
      "default": 1
    },
    {
      "type": "range",
      "id": "mobile_items",
      "min": 1,
      "max": 3,
      "step": 1,
      "unit": "p",
      "label": "Products per row - mobile",
      "default": 2
    },
    {
      "type": "range",
      "id": "tablet_items",
      "min": 3,
      "max": 6,
      "step": 1,
      "unit": "p",
      "label": "Products per row - tablet",
      "default": 3
    },
    {
      "type": "range",
      "id": "desktop_items",
      "min": 3,
      "max": 6,
      "step": 1,
      "unit": "p",
      "label": "Products per row - desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "items_limit",
      "min": 3,
      "max": 20,
      "step": 1,
      "unit": "p",
      "label": "Maximum number of products",
      "default": 8
    },
    {
      "type": "header",
      "content": "Alert",
      "info": "⚠️ Due to the way how this section is created, any change you make to the settings above will disable the slider, and some edits may not show up only after you save the changes."
    },
    {
      "type": "header",
      "content": "Section settings"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently viewed products"
    },
    {
      "type": "select",
      "id": "background_type",
      "label": "Background type",
      "options": [
        {
          "value": "image",
          "label": "Image"
        },
        {
          "value": "just-color",
          "label": "Color"
        }
      ],
      "default": "just-color"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "transparent",
      "info": "Applied only if Type is 'Color'"
    },
    {
      "type": "image_picker",
      "id": "background_image",
      "label": "Image",
      "info": "Applied only if Type is 'Image'"
    },
    {
      "type": "range",
      "id": "space_between_elements",
      "label": "Space between elements",
      "min": 1,
      "max": 3,
      "step": 1,
      "unit": "rem",
      "default": 1
    },
    {
      "type": "range",
      "id": "space_outside_elements",
      "label": "Space outside elements",
      "min": 30,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 50
    },
    {
      "type": "range",
      "id": "row_width",
      "min": 40,
      "max": 90,
      "step": 5,
      "unit": "%",
      "label": "Row width relative to screen",
      "default": 50
    },
    {
      "type": "select",
      "id": "section_width",
      "label": "Section width",
      "default": "full",
      "options": [
        {
          "value": " ",
          "label": "Full width"
        },
        {
          "value": "wrapped",
          "label": "Wrapped"
        }
      ],
      "default": " "
    }
  ],

  "presets": [
    {
      "name": "Recently viewed products"
    }
  ]
}
{% endschema %}
